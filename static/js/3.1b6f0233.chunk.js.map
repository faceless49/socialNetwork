{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Profile/MyPosts/MyPosts.module.scss","components/Profile/MyPosts/Post/Post.module.scss","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","error","profile","onSubmit","className","styles","formSummaryError","createField","Input","lookingForAJob","type","lookingForAJobDescription","Textarea","aboutMe","Object","keys","contacts","map","key","Contact","contactTitle","contactValue","s","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","ProfileInfo","savePhoto","saveProfile","useState","editMode","setEditMode","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","onChange","e","currentTarget","files","length","formData","then","initialValues","Post","item","message","likesCount","MyPosts","React","memo","console","log","postElements","posts","p","id","reverse","postsBlock","AddNewPostFormRedux","values","addPost","newPostText","maxLength10","maxLengthCreator","Field","component","name","placeholder","validate","required","MyPostsContainer","profilePage","dispatch","actions","addPostAC","Profile","status","updateStatus","ProfileContainer","userID","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","compose","userId","withRouter"],"mappings":"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","file":"static/js/3.1b6f0233.chunk.js","sourcesContent":["import { Redirect } from \"react-router-dom\";\nimport React, { ComponentType } from \"react\";\nimport { AppStateType } from \"../redux/redux-store\";\nimport { connect } from \"react-redux\";\n\ntype MapStatePropsType = {\n  isAuth: boolean;\n};\n\nlet mapStateToPropsForRedirect = (state: AppStateType) =>\n  ({\n    isAuth: state.auth.isAuth,\n  } as MapStatePropsType);\n\nexport const withAuthRedirect = function <T>(Component: ComponentType<T>) {\n  const RedirectComponent: React.FC<MapStatePropsType> = (props) => {\n    let { isAuth, ...restProps } = props;\n\n    if (!isAuth) return <Redirect to={\"/login\"} />;\n    return <Component {...(restProps as T)} />;\n  };\n\n  let ConnectedAuthRedirectComponent = connect<\n    MapStatePropsType,\n    {},\n    T,\n    AppStateType\n  >(mapStateToPropsForRedirect)(RedirectComponent);\n  return ConnectedAuthRedirectComponent;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__14JLS\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2BRpy\",\"contact\":\"ProfileInfo_contact__29CXM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3_b6W\",\"posts\":\"MyPosts_posts__3cmmO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__xjgp4\"};","import React, { FC } from \"react\";\nimport {\n  createField,\n  GetStringKeys,\n  Input,\n  Textarea,\n} from \"../../common/FormsControls/FormsControls\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { ProfileType } from \"../../../redux/profile-reducer\";\nimport styles from \"../../common/FormsControls/FormsControls.module.scss\";\n\n// export type ProfileDataFormPropsType = {\n//   profile: ProfileType;\n//   status: string;\n//   updateStatus: (status: string) => void;\n//   isOwner?: boolean;\n//   savePhoto: (file: any) => void;\n//   goToEditMode?: () => void;\n//   handleSubmit: () => void;\n// };\n// type ProfileDataFormValuesType = {\n//   profile: ProfileType;\n//   status: string;\n//   isOwner?: boolean;\n// };\n// type ProfileDataFormOwnProps = {\n//   updateStatus: (status: string) => void;\n//   savePhoto: (file: any) => void;\n//   goToEditMode?: () => void;\n//   handleSubmit: () => void;\n// };\n//\n// type ProfileDataFormValuesTypeKeys = Extract<keyof ProfileType, string>;\n// type ContactValuesTypeKeys = Extract<keyof ContactsType, string>;\n\ntype PropsType = {\n  profile: ProfileType;\n};\ntype ProfileTypeKeys = GetStringKeys<ProfileType>;\nconst ProfileDataForm: FC<\n  InjectedFormProps<ProfileType, PropsType> & PropsType\n> = ({ handleSubmit, error, profile }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"\">\n        <button>Save</button>\n      </div>\n      {error && <div className={styles.formSummaryError}>{error}</div>}\n\n      <div className=\"\">\n        <b>Full Name</b>\n        {createField<ProfileTypeKeys>(\n          \"Full name\",\n          \"fullName\",\n          [],\n          Input,\n          {},\n          \"\"\n        )}\n      </div>\n      <div className=\"\">\n        <b>Looking for a job:</b> {profile.lookingForAJob ? \"yes\" : \"no\"}\n      </div>\n      {createField<ProfileTypeKeys>(\n        \"\",\n        \"lookingForAJob\",\n        [],\n        Input,\n        { type: \"checkbox\" },\n        \"\"\n      )}\n\n      <div className=\"\">\n        <b>My professional skills</b> {profile.lookingForAJobDescription}\n        {createField<ProfileTypeKeys>(\n          \"My professional skills\",\n          \"lookingForAJobDescription\",\n          [],\n          Textarea,\n          \"\",\n          \"\"\n        )}\n      </div>\n\n      <div className=\"\">About me: {profile.aboutMe} </div>\n      {createField<ProfileTypeKeys>(\n        \"About me\",\n        \"aboutMe\",\n        [],\n        Textarea,\n        \"\",\n        \"\"\n      )}\n      <div className=\"\">\n        <b>Contacts: </b>\n        {Object.keys(profile.contacts).map((key) => {\n          return (\n            <div key={key} className=\"\">\n              <b>\n                {key}:{createField(key, \"contacts.\" + key, [], Input, {}, \"\")}\n              </b>\n            </div>\n          );\n        })}\n      </div>\n    </form>\n  );\n};\n\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({\n  form: \"edit-profile\",\n})(ProfileDataForm);\n\nexport default ProfileDataFormReduxForm;\n","import s from \"./ProfileInfo.module.scss\";\nimport userPhoto from \"./../../../assets/img/user.png\";\nimport { Preloader } from \"../../common/preloader/Preloader\";\nimport React, { ChangeEvent, FC, useState } from \"react\";\nimport { ProfilePropsType } from \"../Profile\";\nimport { ContactsType, ProfileType } from \"../../../redux/profile-reducer\";\nimport ProfileDataForm from \"./ProfileDataForm\";\n\nconst ProfileInfo: React.FC<ProfilePropsType> = ({\n  profile,\n  isOwner,\n  savePhoto,\n  saveProfile,\n}) => {\n  let [editMode, setEditMode] = useState(false);\n  if (!profile) {\n    return <Preloader />;\n  }\n\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.currentTarget.files?.length) {\n      savePhoto(e.currentTarget.files[0]);\n    }\n  };\n  const onSubmit = (formData: ProfileType) => {\n    // todo: remove then\n    saveProfile(formData).then(() => {\n      setEditMode(false);\n    });\n  };\n  return (\n    <div>\n      <div className={s.descriptionBlock}>\n        <img src={profile.photos.large || userPhoto} className={s.mainPhoto} />\n        {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\n\n        {editMode ? (\n          <ProfileDataForm\n            // @ts-ignore\n            onSubmit={onSubmit}\n            initialValues={profile}\n            profile={profile}\n          />\n        ) : (\n          <ProfileData\n            profile={profile}\n            isOwner={isOwner}\n            goToEditMode={() => {\n              setEditMode(true);\n            }}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\ntype ContactPropsType = {\n  contactTitle: string;\n  contactValue: string;\n};\n\nexport const Contact: FC<ContactPropsType> = ({\n  contactTitle,\n  contactValue,\n}) => {\n  return (\n    <div className={s.contact}>\n      <b>\n        {contactTitle}: {contactValue}\n      </b>\n    </div>\n  );\n};\n\ntype ProfileDataPropsType = {\n  profile: ProfileType;\n  isOwner: boolean;\n  goToEditMode: () => void;\n};\nconst ProfileData: FC<ProfileDataPropsType> = ({\n  profile,\n  isOwner,\n  goToEditMode,\n}) => {\n  return (\n    <>\n      {isOwner && (\n        <div className=\"\">\n          <button onClick={goToEditMode}>Edit</button>\n        </div>\n      )}\n      <div className=\"\">\n        <b>Full Name</b> {profile.fullName}\n      </div>\n      <div className=\"\">\n        <b>Looking for a job:</b> {profile.lookingForAJob ? \"yes\" : \"no\"}\n      </div>\n\n      {profile.lookingForAJob && (\n        <div className=\"\">\n          <b>My professional skills</b> {profile.lookingForAJobDescription}\n        </div>\n      )}\n      <div className=\"\">\n        <b>\n          Contacts:\n          {Object.keys(profile.contacts).map((key) => {\n            return (\n              <Contact\n                key={key}\n                contactTitle={key}\n                contactValue={profile.contacts[key as keyof ContactsType]}\n              />\n            );\n            //@TODO: Refactor 97L\n          })}\n        </b>\n      </div>\n    </>\n  );\n};\n\nexport default ProfileInfo;\n","import React from 'react';\r\nimport s from './Post.module.scss';\r\nimport {PostType} from '../../../../redux/profile-reducer';\r\n\r\nconst Post = (props: PostType) => {\r\n\r\n  return (\r\n    <div className={s.item}>\r\n      <img src=\"https://movies4maniacs.liberty.me/wp-content/uploads/sites/1218/2015/09/avatarsucks.jpg\"/>\r\n      {props.message}\r\n      <div>\r\n        <span>like</span> {props.likesCount}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;\r\n","import React from \"react\";\nimport s from \"./MyPosts.module.scss\";\nimport Post from \"./Post/Post\";\nimport { PostType } from \"../../../redux/profile-reducer\";\nimport { Field, reduxForm } from \"redux-form\";\nimport {\n  maxLengthCreator,\n  required,\n} from \"../../../utils/validators/validators\";\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\n\ntype MyPostsType = {\n  posts: Array<PostType>;\n  addPost: (newPostText: string) => void;\n};\n\nexport const MyPosts = React.memo((props: MyPostsType) => {\n  console.log(\"render Mypost PC\");\n  let postElements = props.posts\n    .map((p: PostType) => (\n      <Post id={p.id} message={p.message} likesCount={p.likesCount} />\n    ))\n    .reverse();\n\n  const onAddPost = (values: any) => {\n    props.addPost(values.newPostText);\n  };\n\n  return (\n    <div className={s.postsBlock}>\n      <h3>My posts</h3>\n      <div>\n        <AddNewPostFormRedux onSubmit={onAddPost} />\n      </div>\n      <div className={s.posts}>{postElements}</div>\n    </div>\n  );\n});\n\nconst maxLength10 = maxLengthCreator(10);\nconst AddNewPostForm = (props: any) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <Field\n        component={Textarea}\n        name=\"newPostText\"\n        placeholder=\"it-kamasutra\"\n        validate={[required, maxLength10]}\n      />\n      <button>Add post</button>\n    </form>\n  );\n};\nconst AddNewPostFormRedux = reduxForm({ form: \"ProfileAddNewPostForm\" })(\n  AddNewPostForm\n);\n\nexport default MyPosts;\n","import React from \"react\";\nimport { actions, PostType } from \"../../../redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport { connect } from \"react-redux\";\nimport { AppStateType } from \"../../../redux/redux-store\";\nimport { Dispatch } from \"redux\";\n\ntype MapStatePropsType = {\n  posts: Array<PostType>;\n};\n\ntype MapDispatchToPropsType = {\n  addPost: (newPostText: string) => void;\n};\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n  return {\n    posts: state.profilePage.posts,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n  return {\n    addPost: (newPostText) => {\n      dispatch(actions.addPostAC(newPostText));\n    },\n  };\n};\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\nexport default MyPostsContainer;\n","import React from \"react\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport { ProfileType } from \"../../redux/profile-reducer\";\n\nexport type ProfilePropsType = {\n  profile: ProfileType | null;\n  status: string;\n  updateStatus: (status: string) => void;\n  isOwner: boolean;\n  savePhoto: (file: File) => void;\n  saveProfile: (formData: ProfileType) => Promise<any>;\n};\nconst Profile = (props: ProfilePropsType) => {\n  return (\n    <div>\n      <ProfileInfo\n        isOwner={props.isOwner}\n        profile={props.profile}\n        status={props.status}\n        updateStatus={props.updateStatus}\n        savePhoto={props.savePhoto}\n        saveProfile={props.saveProfile}\n      />\n      <MyPostsContainer />\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {\n  getStatus,\n  getUserProfile,\n  ProfileType,\n  savePhoto,\n  saveProfile,\n  updateStatus,\n} from \"../../redux/profile-reducer\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { AppStateType } from \"../../redux/redux-store\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\n\ntype MapDispatchToProps = {\n  getUserProfile: (userID: number) => void;\n  getStatus: (userID: number) => void;\n  updateStatus: (status: string) => void;\n  savePhoto: (file: File) => void;\n  saveProfile: (profile: ProfileType) => Promise<any>;\n};\n\ntype PathParamsType = {\n  userID: string;\n};\n\ntype PropsType = MapPropsType &\n  MapDispatchToProps &\n  RouteComponentProps<PathParamsType>;\n\nclass ProfileContainer extends React.Component<PropsType> {\n  refreshProfile() {\n    let userID: number | null = +this.props.match.params.userID;\n    if (!userID) {\n      userID = this.props.authorizedUserId;\n      if (!userID) {\n        this.props.history.push(\"/login\");\n      }\n    }\n    if (!userID) {\n      console.error(\n        \"ID should exists in URI params or in state ('authorizedUserId')\"\n      );\n    } else {\n      this.props.getUserProfile(userID);\n      this.props.getStatus(userID);\n    }\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n  componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\n    if (this.props.match.params.userID !== prevProps.match.params.userID) {\n      this.refreshProfile();\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Profile\n          {...this.props}\n          isOwner={!this.props.match.params.userID}\n          profile={this.props.profile}\n          status={this.props.status}\n          updateStatus={this.props.updateStatus}\n          savePhoto={this.props.savePhoto}\n        />\n      </div>\n    );\n  }\n}\nlet mapStateToProps = (state: AppStateType) => ({\n  profile: state.profilePage.profile,\n  status: state.profilePage.status,\n  authorizedUserId: state.auth.userId,\n  isAuth: state.auth.isAuth,\n});\nexport default compose<React.ComponentType>(\n  connect(mapStateToProps, {\n    getUserProfile,\n    getStatus,\n    updateStatus,\n    savePhoto,\n    saveProfile,\n  }),\n  withRouter,\n  withAuthRedirect\n)(ProfileContainer);\n"],"sourceRoot":""}