{"version":3,"sources":["components/Dialogs/Dialogs.module.scss","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","DialogItem","id","name","path","className","s","dialog","active","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","dialogs","messages","sendMessage","dialogsElements","map","messagesElements","dialogsItems","values","newMessageBody","compose","dialogsPage","actions"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oHCQ9KC,EAA6B,SAACC,GAAD,MAC9B,CACCC,OAAQD,EAAME,KAAKD,SAGhB,SAASE,EAAsBC,GAepC,OANqCC,YAKnCN,EALmCM,EARuB,SAACC,GAC3D,IAAML,EAAyBK,EAAzBL,OAAWM,EAAjB,YAA+BD,EAA/B,YAEA,OAAKL,EAEE,cAACG,EAAD,eAAuBG,IAFV,cAAC,IAAD,CAAUC,GAAI,gB,4GCHvBC,EAV0B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KAC1CC,EAAO,YAAcF,EAEzB,OACE,qBAAKG,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACE,cAAC,IAAD,CAASR,GAAII,EAAb,SAAoBD,OCFXM,EAJkB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAClC,OAAO,qBAAKL,UAAWC,IAAEC,OAAlB,SAA2BG,K,yBCC9BC,EAAcC,YAAiB,IAyBxBC,EAAsBC,YAAwC,CACzEC,KAAM,wBAD2BD,EAhB/B,SAAChB,GACH,OACE,uBAAMkB,SAAUlB,EAAMmB,aAAtB,UACGC,YACC,qBACA,iBACA,CAACC,IAAUR,GACXS,IACA,GACA,IAEF,wDC2BSC,EA7ByB,SAAC,GAKlC,IAJLC,EAII,EAJJA,QACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,YAGIC,GADA,oDACkBH,EAAQI,KAAI,gBAAGxB,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OAChC,cAAC,EAAD,CAAqBA,KAAMA,EAAMD,GAAIA,GAApBA,OAEfyB,EAAmBJ,EAASG,KAAI,gBAAGxB,EAAH,EAAGA,GAAIQ,EAAP,EAAOA,QAAP,OAClC,cAAC,EAAD,CAAkBA,QAASA,EAASR,GAAIA,GAA1BA,MAQhB,OACE,sBAAKG,UAAWC,IAAEgB,QAAlB,UACE,qBAAKjB,UAAWC,IAAEsB,aAAlB,SAAiCH,IACjC,qBAAKpB,UAAWC,IAAEiB,SAAlB,SACE,8BAAMI,MAER,cAACd,EAAD,CAAqBG,SAVH,SAACa,GACrBL,EAAYK,EAAOC,uB,yBCFRC,sBACblC,aApBoB,SAACL,GACrB,MAAO,CACL8B,QAAS9B,EAAMwC,YAAYV,QAC3BC,SAAU/B,EAAMwC,YAAYT,YAiBvB,eAAuBU,MAC9BtC,IAFaoC,CAGbV","file":"static/js/4.577bc153.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1X47a\",\"dialogsItems\":\"Dialogs_dialogsItems__2RU5g\",\"active\":\"Dialogs_active__2LfVf\",\"messages\":\"Dialogs_messages__2dOEm\",\"message\":\"Dialogs_message__2g2EH\"};","import { Redirect } from \"react-router-dom\";\nimport React, { ComponentType } from \"react\";\nimport { AppStateType } from \"../redux/redux-store\";\nimport { connect } from \"react-redux\";\n\ntype MapStatePropsType = {\n  isAuth: boolean;\n};\n\nlet mapStateToPropsForRedirect = (state: AppStateType) =>\n  ({\n    isAuth: state.auth.isAuth,\n  } as MapStatePropsType);\n\nexport function withAuthRedirect<WCP>(WrappedComponent: ComponentType<WCP>) {\n  const RedirectComponent: React.FC<MapStatePropsType & {}> = (props) => {\n    let { isAuth, ...restProps } = props;\n\n    if (!isAuth) return <Redirect to={\"/login\"} />;\n\n    return <WrappedComponent {...(restProps as WCP)} />;\n  };\n\n  let ConnectedAuthRedirectComponent = connect<\n    MapStatePropsType,\n    {},\n    WCP,\n    AppStateType\n  >(mapStateToPropsForRedirect)(RedirectComponent);\n  return ConnectedAuthRedirectComponent;\n}\n","import s from \"./../Dialogs.module.scss\";\nimport { NavLink } from \"react-router-dom\";\nimport { DialogType } from \"../../../types/types\";\nimport React from \"react\";\n\nconst DialogItem: React.FC<DialogType> = ({ id, name }) => {\n  let path = \"/dialogs/\" + id;\n\n  return (\n    <div className={s.dialog + \" \" + s.active}>\n      <NavLink to={path}>{name}</NavLink>\n    </div>\n  );\n};\n\nexport default DialogItem;\n","import s from \"./../Dialogs.module.scss\";\nimport { MessageType } from \"../../../types/types\";\nimport { FC } from \"react\";\n\nconst Message: FC<MessageType> = ({ message }) => {\n  return <div className={s.dialog}>{message}</div>;\n};\n\nexport default Message;\n","import { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { createField, Textarea } from \"../common/FormsControls/FormsControls\";\nimport { maxLengthCreator, required } from \"../../utils/validators/validators\";\nimport React from \"react\";\nimport { NewMessageFormValuesType } from \"./Dialogs\";\n\nconst maxLength50 = maxLengthCreator(50);\n\ntype MessageFormValuesTypeKeys = Extract<\n  keyof NewMessageFormValuesType,\n  string\n>;\n\nconst AddMessageForm: React.FC<\n  InjectedFormProps<NewMessageFormValuesType, {}> & {}\n> = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      {createField<MessageFormValuesTypeKeys>(\n        \"Enter your message\",\n        \"newMessageBody\",\n        [required, maxLength50],\n        Textarea,\n        {},\n        \"\"\n      )}\n      <button>Send message</button>\n    </form>\n  );\n};\n\nexport const AddMessageFormRedux = reduxForm<NewMessageFormValuesType, {}>({\n  form: \"dialogAddMessageForm\",\n})(AddMessageForm);\n","import s from \"./Dialogs.module.scss\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport React from \"react\";\nimport { AddMessageFormRedux } from \"./AddMessageForm\";\nimport { MessageType } from \"../../types/types\";\n\ntype DialogType = {\n  id: string;\n  name: string;\n};\n\ntype OwnTypeProps = {\n  dialogs: Array<DialogType>;\n  messages: Array<MessageType>;\n  updateNewMessageBody: (body: string) => void;\n  sendMessage: (values: string) => void;\n  newMessageBody: string;\n};\n\nexport type NewMessageFormValuesType = {\n  newMessageBody: string;\n};\n\nconst Dialogs: React.FC<OwnTypeProps> = ({\n  dialogs,\n  messages,\n  sendMessage,\n  ...restProps\n}) => {\n  let dialogsElements = dialogs.map(({ id, name }) => (\n    <DialogItem key={id} name={name} id={id} />\n  ));\n  let messagesElements = messages.map(({ id, message }) => (\n    <Message key={id} message={message} id={id} />\n  ));\n\n  // if (!props.isAuth) return <Redirect to={\"/login\"} />; IN Hoc!\n  const addNewMessage = (values: NewMessageFormValuesType) => {\n    sendMessage(values.newMessageBody);\n  };\n\n  return (\n    <div className={s.dialogs}>\n      <div className={s.dialogsItems}>{dialogsElements}</div>\n      <div className={s.messages}>\n        <div>{messagesElements}</div>\n      </div>\n      <AddMessageFormRedux onSubmit={addNewMessage} />\n    </div>\n  );\n};\n\nexport default Dialogs;\n","import React from \"react\";\nimport { actions } from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport { connect } from \"react-redux\";\nimport { AppStateType } from \"../../redux/redux-store\";\nimport { compose, Dispatch } from \"redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { DialogType, MessageType } from \"../../types/types\";\n\ntype MapStatePropsType = {\n  dialogs: Array<DialogType>;\n  messages: Array<MessageType>;\n};\n\n// type MapDispatchPropsType = {\n//   sendMessage: (newMessageBody: string) => void;\n// };\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\n  return {\n    dialogs: state.dialogsPage.dialogs,\n    messages: state.dialogsPage.messages,\n  };\n};\n\n// let mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n//   return {\n//     sendMessage: (newMessageBody) => {\n//       dispatch(actions.sendMessage(newMessageBody));\n//     },\n//   };\n// };\n\n//* connect создает контейнерную, отрисует в ней презентационную\n//* засунет в нее пропсы из объектов в ()\n//* коннектим Диалогс к стору\n\nexport default compose<React.ComponentType>(\n  connect(mapStateToProps, { ...actions }),\n  withAuthRedirect\n)(Dialogs);\n"],"sourceRoot":""}