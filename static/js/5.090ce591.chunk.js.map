{"version":3,"sources":["components/Dialogs/Dialogs.module.scss","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","DialogItem","path","id","className","s","dialog","active","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","compose","dialogsPage","dispatch"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oHCQ9KC,EAA6B,SAACC,GAAD,MAC9B,CACCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAAaC,GAc3C,OANqCC,YAKnCN,EALmCM,EAPkB,SAACC,GACtD,IAAML,EAAyBK,EAAzBL,OAAWM,EAAjB,YAA+BD,EAA/B,YAEA,OAAKL,EACE,cAACG,EAAD,eAAgBG,IADH,cAAC,IAAD,CAAUC,GAAI,gB,sFCNvBC,EARI,SAACH,GAClB,IAAII,EAAO,YAAcJ,EAAMK,GAE/B,OAAO,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACL,cAAC,IAAD,CAASP,GAAIE,EAAb,SAAoBJ,EAAMU,UCCfC,EALC,SAACX,GACf,OAAO,qBAAKM,UAAWC,IAAEC,OAAlB,SAA2BR,EAAMY,W,wCCApCC,EAAcC,YAAiB,IAgBxBC,EAAsBC,YAAU,CAAEC,KAAM,wBAAlBD,EAdZ,SAAChB,GACtB,OACE,uBAAMkB,SAAUlB,EAAMmB,aAAtB,UACE,cAACC,EAAA,EAAD,CACEC,UAAWC,IACXZ,KAAK,iBACLa,YAAY,qBACZC,SAAU,CAACC,IAAUZ,KAEvB,wDC8BSa,EAzBC,SAAC1B,GACf,IAAI2B,EAAkB3B,EAAM4B,QAAQC,KAAI,SAACC,GAAD,OACtC,cAAC,EAAD,CAAuBpB,KAAMoB,EAAEpB,KAAML,GAAIyB,EAAEzB,IAA1ByB,EAAEzB,OAEjB0B,EAAmB/B,EAAMgC,SAASH,KAAI,SAACI,GAAD,OACxC,cAAC,EAAD,CAAoBrB,QAASqB,EAAErB,QAASP,GAAI4B,EAAE5B,IAAhC4B,EAAE5B,OAQlB,OACE,sBAAKC,UAAWC,IAAEqB,QAAlB,UACE,qBAAKtB,UAAWC,IAAE2B,aAAlB,SAAiCP,IACjC,sBAAKrB,UAAWC,IAAEyB,SAAlB,UACE,8BAAMD,IACN,2BAEF,cAAChB,EAAD,CAAqBG,SAXH,SAACiB,GACrBnC,EAAMoC,YAAYD,EAAOE,uB,yBCSdC,sBACbvC,aApBoB,SAACL,GACrB,MAAO,CACLkC,QAASlC,EAAM6C,YAAYX,QAC3BI,SAAUtC,EAAM6C,YAAYP,aAIP,SAACQ,GACxB,MAAO,CACLJ,YAAa,SAACC,GACZG,EAASJ,YAAYC,SAWzBxC,IAFayC,CAGbZ","file":"static/js/5.090ce591.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1X47a\",\"dialogsItems\":\"Dialogs_dialogsItems__2RU5g\",\"active\":\"Dialogs_active__2LfVf\",\"messages\":\"Dialogs_messages__2dOEm\",\"message\":\"Dialogs_message__2g2EH\"};","import { Redirect } from \"react-router-dom\";\nimport React, { ComponentType } from \"react\";\nimport { AppStateType } from \"../redux/redux-store\";\nimport { connect } from \"react-redux\";\n\ntype MapStatePropsType = {\n  isAuth: boolean;\n};\n\nlet mapStateToPropsForRedirect = (state: AppStateType) =>\n  ({\n    isAuth: state.auth.isAuth,\n  } as MapStatePropsType);\n\nexport const withAuthRedirect = function <T>(Component: ComponentType<T>) {\n  const RedirectComponent: React.FC<MapStatePropsType> = (props) => {\n    let { isAuth, ...restProps } = props;\n\n    if (!isAuth) return <Redirect to={\"/login\"} />;\n    return <Component {...(restProps as T)} />;\n  };\n\n  let ConnectedAuthRedirectComponent = connect<\n    MapStatePropsType,\n    {},\n    T,\n    AppStateType\n  >(mapStateToPropsForRedirect)(RedirectComponent);\n  return ConnectedAuthRedirectComponent;\n};\n","import s from './../Dialogs.module.scss';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {DialogType} from '../../../redux/dialogs-reducer';\r\n\r\nconst DialogItem = (props: DialogType) => {\r\n  let path = '/dialogs/' + props.id;\r\n\r\n  return <div className={s.dialog + ' ' + s.active}>\r\n    <NavLink to={path}>{props.name}</NavLink>\r\n  </div>\r\n}\r\n\r\nexport default DialogItem;\r\n","import s from './../Dialogs.module.scss';\r\nimport {MessageType} from '../../../redux/dialogs-reducer';\r\n\r\n\r\nconst Message = (props: MessageType) => {\r\n  return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\n\r\nexport default Message;\r\n","import { Field, reduxForm } from \"redux-form\";\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\nimport { maxLengthCreator, required } from \"../../utils/validators/validators\";\nimport React from \"react\";\n\nconst maxLength50 = maxLengthCreator(50);\n\nconst AddMessageForm = (props: any) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <Field\n        component={Textarea}\n        name=\"newMessageBody\"\n        placeholder=\"Enter your message\"\n        validate={[required, maxLength50]}\n      />\n      <button>Send message</button>\n    </form>\n  );\n};\n\nexport const AddMessageFormRedux = reduxForm({ form: \"dialogAddMessageForm\" })(\n  AddMessageForm\n);\n","import s from \"./Dialogs.module.scss\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport React from \"react\";\nimport { MessageType } from \"../../redux/dialogs-reducer\";\nimport { AddMessageFormRedux } from \"./AddMessageForm\";\n\ntype DialogType = {\n  id: string;\n  name: string;\n};\n\ntype PropsType = {\n  dialogs: Array<DialogType>;\n  messages: Array<MessageType>;\n  updateNewMessageBody: (body: string) => void;\n  sendMessage: (values: Array<string>) => void;\n  newMessageBody: string;\n  isAuth: boolean;\n};\n\nconst Dialogs = (props: PropsType) => {\n  let dialogsElements = props.dialogs.map((d: DialogType) => (\n    <DialogItem key={d.id} name={d.name} id={d.id} />\n  ));\n  let messagesElements = props.messages.map((m: MessageType) => (\n    <Message key={m.id} message={m.message} id={m.id} />\n  ));\n\n  // if (!props.isAuth) return <Redirect to={\"/login\"} />;\n  const addNewMessage = (values: any) => {\n    props.sendMessage(values.newMessageBody);\n  };\n\n  return (\n    <div className={s.dialogs}>\n      <div className={s.dialogsItems}>{dialogsElements}</div>\n      <div className={s.messages}>\n        <div>{messagesElements}</div>\n        <div></div>\n      </div>\n      <AddMessageFormRedux onSubmit={addNewMessage} />\n    </div>\n  );\n};\n\nexport default Dialogs;\n","import React from \"react\";\nimport {\n  DialogType,\n  MessageType,\n  sendMessage,\n} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport { connect } from \"react-redux\";\nimport { AppStateType } from \"../../redux/redux-store\";\nimport { compose, Dispatch } from \"redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\n\ntype MapStatePropsType = {\n  dialogs: Array<DialogType>;\n  messages: Array<MessageType>;\n};\n\ntype MapDispatchPropsType = {\n  sendMessage: (newMessageBody: string) => void;\n};\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\n  return {\n    dialogs: state.dialogsPage.dialogs,\n    messages: state.dialogsPage.messages,\n  };\n};\n\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n  return {\n    sendMessage: (newMessageBody) => {\n      dispatch(sendMessage(newMessageBody));\n    },\n  };\n};\n\n//* connect создает контейнерную, отрисует в ней презентационную\n//* засунет в нее пропсы из объектов в ()\n//* коннектим Диалогс к стору\n\nexport default compose<React.ComponentType>(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(Dialogs);\n"],"sourceRoot":""}